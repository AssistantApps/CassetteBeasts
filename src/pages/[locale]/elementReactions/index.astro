---
import Layout from 'components/layouts/Layout.astro';
import Breadcrumb from 'components/Breadcrumb.astro';

import languageJson from '../../../assets/json/language.json';
import versionJson from '../../../assets/json/version.json';

import { readDataFromAssets } from 'helpers/fileHelper';
import { IntermediateFile } from 'constants/intermediateFile';
import { astroPaths } from 'constants/astro';
import { breadcrumb } from 'constants/breadcrumb';
import { availableLanguages, UIKeys } from 'constants/localisation';
import type { ILocalisation } from 'contracts/localisation';
import type { IElementGridCell } from 'contracts/elementReaction';
import { translator } from 'helpers/translateHelper';
import { imgUrl } from 'helpers/urlHelper';

export async function getStaticPaths() {
  const paths: any = [];
  for (const locale of availableLanguages) {
    const grid = await readDataFromAssets<Array<Array<IElementGridCell>>>({
      pathFolders: [...astroPaths.intermediatePath, locale],
      destFileName: IntermediateFile.elementReactionsGrid,
    });
    const path = {
      params: { locale: locale },
      props: { grid },
    };
    paths.push(path as never);
  }
  return paths;
}

const { locale } = Astro.params;
const grid = (Astro.props as any).grid as Array<Array<IElementGridCell>>;
const effectOptions = grid[0].filter(e => e.id.length > 0);
const translationLookup = (languageJson as Record<string, ILocalisation>)[locale].messages;
const { translate } = translator(translationLookup);
---

<Layout
  locale={locale}
  documentTitle={translate(UIKeys.elementalTypeChart)}
  translationLookup={translationLookup}
>
  <Breadcrumb
    locale={locale}
    translationLookup={translationLookup}
    breadcrumbs={[breadcrumb.element(locale)]}
  />

  <div class="hidden-in-mobile mb-3">
    <div class="meta">
      <h1>{translate(UIKeys.elementalTypeChart)}</h1>
    </div>
    <div class="attacker">
      <h3>{translate(UIKeys.attacker)}</h3>
      <div class="defender">
        <h3 class="ta-center">{translate(UIKeys.defender)}</h3>
        <section id="element-reaction-grid">
          {
            grid.map((row, rowIdx) => (
              <Fragment>
                {row.map((cell, colIdx) => (
                  <div
                    class={`${cell.id} cell x-${colIdx} y-${rowIdx} ${cell.buffs.length > 0 ? 'hasBuffs' : ''} ${cell.is_buff ? 'buff' : ''} ${cell.is_debuff ? 'debuff' : ''}`}
                  >
                    {cell.iconUrl != null && (
                      <img
                        src={imgUrl(cell.iconUrl)}
                        class="element"
                        loading="lazy"
                        alt={`${cell.name}`}
                        draggable="false"
                      />
                    )}

                    {cell.buffs.length > 0 && (
                      <div class="buffs">
                        {cell.buffs.map((buff) => (
                          <div class="effect">
                            <img
                              src={imgUrl(buff.icon?.path)}
                              class="status"
                              alt={`${buff.name_localised}`}
                              loading="lazy"
                              draggable="false"
                            />
                          </div>
                        ))}
                      </div>

                    <div
                      class={`buffs-popup buff-details ${cell.buffs ? 'hasBuffs' : ''} ${cell.is_buff ? 'buff' : ''} ${cell.is_debuff ? 'debuff' : ''}`}
                    >
                      {cell.is_buff && <h3>{translate(UIKeys.defender)}</h3>}
                      {cell.is_debuff && <h3>{translate(UIKeys.debuffs)}</h3>}

                      {cell.buffs.map((buff) => (
                        <div class="details">
                          <img
                            src={imgUrl(buff.icon?.path)}
                            class="status"
                            alt={`${buff.name_localised}`}
                            loading="lazy"
                            draggable="false"
                          />
                          <div class="text">
                            <h4 class="name">{buff.name_localised}</h4>
                            {buff.description_localised}
                          </div>
                        </div>
                      ))}
                    </div>

                    )}
                  </div>
                ))}
              </Fragment>
            ))
          }
        </section>
      </div>
    </div>
  </div>
  
  <section id="element-reaction-list" class="hidden-in-desktop mb-3">
    <br>
    <h3 class="ta-center">{translate(UIKeys.attacker)}</h3>
    <details id="attacker" class="dropdown">
        <summary class="role-link">
            <li class="effect-option cursor-pointer">
                <img src="/assets/img/typeless.png" class="type" loading="lazy"
                    title={translate(UIKeys.typeless)}
                    alt={translate(UIKeys.typeless)} draggable="false">
                <div class="text">{translate(UIKeys.typeless)}</div>
            </li>
        </summary>
        <ul class="dropdown-list">
            <li data-id="" class="effect-option cursor-pointer"
                onclick="onElementSelect(this, 'element-reaction-list')">
                <img src="/assets/img/typeless.png" class="type" loading="lazy"
                    title={translate(UIKeys.typeless)}
                    alt={translate(UIKeys.typeless)} draggable="false">
                <div class="text">{translate(UIKeys.typeless)}</div>
            </li>
            {
            effectOptions.map(effect => <li data-id={effect.id} class="effect-option cursor-pointer"
                onclick="onElementSelect(this, 'element-reaction-list')">
                <img src={imgUrl(effect.iconUrl)} alt={effect.name} loading="lazy" />
                <div class="text">
                    {effect.name}
                </div>
            </li>)
            }
        </ul>
    </details>

    <br>

    <h3 class="ta-center">{translate(UIKeys.defender)}</h3>
    <details id="defender" class="dropdown">
        <summary class="role-link">
            <li class="effect-option cursor-pointer">
                <img src="/assets/img/typeless.png" class="type" loading="lazy"
                    title={translate(UIKeys.typeless)}
                    alt={translate(UIKeys.typeless)} draggable="false">
                <div class="text">{translate(UIKeys.typeless)}</div>
            </li>
        </summary>
        <ul class="dropdown-list">
            <li data-id="" class="effect-option cursor-pointer"
                onclick="onElementSelect(this, 'element-reaction-list')">
                <img src="/assets/img/typeless.png" class="type" loading="lazy"
                    title={translate(UIKeys.typeless)}
                    alt={translate(UIKeys.typeless)} draggable="false">
                <div class="text">{translate(UIKeys.typeless)}</div>
            </li>
            {
            effectOptions.map(effect => <li data-id={effect.id} class="effect-option cursor-pointer"
                onclick="onElementSelect(this, 'element-reaction-list')">
                <img src={imgUrl(effect.iconUrl)} alt={effect.name} loading="lazy" />
                <div class="text">
                    {effect.name}
                </div>
            </li>)
            }
        </ul>
    </details>

    <br>

    {
      grid.map((row) => (
        <Fragment>
          {row.map((cell) => (
            <Fragment>
                {
                  cell.buffs.length > 0 && (<div class={`buff-details ${cell.id} ${cell.buffs ? 'hasBuffs' : ''} ${cell.is_buff ? 'buff' : ''} ${cell.is_debuff ? 'debuff' : ''}`}>
                    <div class="extended">
                        <div class="mobile-detail-row">
                            <div class="attacker"></div>
                            <div class="action"></div>
                            <div class="defender"></div>
                        </div>
                        <div class="content">
                              {cell.is_buff && <h3>{translate(UIKeys.defender)}</h3>}
                              {cell.is_debuff && <h3>{translate(UIKeys.debuffs)}</h3>}

                              {cell.buffs.map((buff) => (
                                <div class="details">
                                  <img
                                    src={imgUrl(buff.icon?.path)}
                                    class="status"
                                    alt={`${buff.name_localised}`}
                                    loading="lazy"
                                    draggable="false"
                                  />
                                  <div class="text">
                                    <h4 class="name">{buff.name_localised}</h4>
                                    {buff.description_localised}
                                  </div>
                                </div>
                              ))}
                        </div>
                    </div>
                  </div>)
                }
            </Fragment>
          ))}
        </Fragment>
      ))
    }

    <br>

    <div class="no-effect ta-center">
        <div class="card hasBuffs">
            <h5>No effect</h5>
        </div>
    </div>
  </section>

  <script is:inline defer src={`/assets/js/highlightGrid.js?v=${versionJson.app_version}`}></script>
</Layout>

---
import Breadcrumb from 'components/Breadcrumb.astro';
import Layout from 'components/layouts/Layout.astro';
import LazyImage from 'components/common/LazyImage.astro';

import languageJson from '../../../assets/json/language.json';
import './_list.scss';

import { astroPaths } from 'constants/astro';
import { breadcrumb } from 'constants/breadcrumb';
import { AppImage } from 'constants/image';
import { IntermediateFile } from 'constants/intermediateFile';
import { availableLanguages, UIKeys } from 'constants/localisation';
import { routes } from 'constants/route';
import { site } from 'constants/site';
import type { ILocalisation } from 'contracts/localisation';
import type { IMoveEnhanced } from 'contracts/move';
import { AccessMode, type IGuideSchema } from 'contracts/schema/guideScheme';
import { isoDate } from 'helpers/dateHelper';
import { readDataFromAssets } from 'helpers/fileHelper';
import { toSchemaOrgProperty } from 'helpers/schemaHelper';
import { sortByStringProperty } from 'helpers/sortHelper';
import { limitLengthWithEllipse } from 'helpers/stringHelper';
import { translator } from 'helpers/translateHelper';

export async function getStaticPaths() {
  const paths: any = [];
  for (const locale of availableLanguages) {
    const itemMap = await readDataFromAssets<Record<string, IMoveEnhanced>>({
      pathFolders: [...astroPaths.intermediatePath, locale],
      destFileName: IntermediateFile.moves,
    });
    const path = {
      params: { locale: locale },
      props: { list: Object.values(itemMap) },
    };
    paths.push(path as never);
  }
  return paths;
}

const { locale } = Astro.params;
const unorderedList = (Astro.props as any).list as Array<IMoveEnhanced>;
const list = unorderedList.sort(sortByStringProperty((l) => l.name_localised));
const translationLookup = (languageJson as Record<string, ILocalisation>)[locale].messages;
const { translate } = translator(translationLookup);

const descriptionMessages = list
  .slice(0, 5)
  .map((g) => g.description_localised)
  .filter((m) => m != null)
  .join('. ');
const description = limitLengthWithEllipse(descriptionMessages, 120);
const schemaOverride: IGuideSchema = {
  name: translate(UIKeys.viewStickers),
  headline: translate(UIKeys.viewStickers),
  about: description,
  abstract: description,
  description: description,
  accessMode: AccessMode.textual,
  dateModified: isoDate(),
  thumbnailUrl: site.rootUrl + AppImage.meta.slice(1),
  // thumbnailUrl: site.rootUrl + data.meta_image_url.slice(1),
};
---

<Layout
  locale={locale}
  documentTitle={translate(UIKeys.viewStickers)}
  additionalKeywords={[translate(UIKeys.viewStickers)]}
  schemaOverride={toSchemaOrgProperty('Guide', schemaOverride)}
  translationLookup={translationLookup}
>
  <Breadcrumb
    locale={locale}
    translationLookup={translationLookup}
    breadcrumbs={[breadcrumb.move(locale)]}
  />

  <section id="search">
    <fieldset role="group">
      <input
        type="search"
        name="search"
        placeholder="Search for..."
        class="search-input-border-radius"
        oninput="onSearchChange(this.value)"
      />
      <button
        id="list-mode"
        class="secondary project-btn no-border-right hidden-in-mobile"
        data-class="list"
        onclick="applyClassToId('move-grid', '-mode', this.id); toggleClassToId(this.id, 'selected', true); toggleClassToId('grid-mode', 'selected', false)"
        data-tooltip="List view">☰</button
      >
      <button
        id="grid-mode"
        class="secondary project-btn no-border-left hidden-in-mobile selected"
        data-class="grid"
        onclick="applyClassToId('move-grid', '-mode', this.id); toggleClassToId(this.id, 'selected', true); toggleClassToId('list-mode', 'selected', false)"
        data-tooltip="Grid view">▦</button
      >
    </fieldset>
  </section>

  <section id="move-grid" class="item-grid-list grid-mode mb-3">
    <div class="meta">
      <h1>{translate(UIKeys.viewStickers)}</h1>
      <h2>Assistant for {translate(UIKeys.cassetteBeasts)}</h2>
    </div>

    {
      list.map((data, index) => (
        <a
          href={`/${locale}${routes.moves}/${data.id}.html`}
          class="grid-list-item item no-hover-mobile animate__animated animate__fadeIn"
          data-title={data.name_localised}
          data-description={data.description_localised}
          style={`animation-delay: ${Math.min(index * 30, 600)}ms;`}
          draggable="false"
        >
          <div class="header">
            <div class="types">
              {data.elemental_types_elements.length > 0 ? (
                data.elemental_types_elements.map((elem) => (
                  <LazyImage
                    src={elem.icon?.path}
                    classes="type"
                    alt={`element of ${elem.name_localised}`}
                  />
                ))
              ) : (
                <LazyImage src="/assets/img/typeless.png" classes="type" alt="Typeless" />
              )}
            </div>
            <div class="center-item">
              <div class="heading">
                <h3 class="Neu5Land">{data.name_localised}</h3>
              </div>
            </div>
            <div class="ap-vertical">
              {Array.from(Array(data.cost)).map(() => (
                <img
                  src="/assets/img/meta/ap.png"
                  class="ap"
                  title="Action Point"
                  alt="an action point"
                  loading="lazy"
                  draggable="false"
                />
              ))}
            </div>
          </div>
          <section
            class={`grid-list-item-container ${data.status_effects_elements_max_3 ? '' : 'no-status'}`}
          >
            <small class="description">
              {limitLengthWithEllipse(data.description_localised, 100)}
            </small>

            <div class="extra">
              {data.power > 0 && (
                <small>
                  <b>{translate(UIKeys.power)}: </b>
                  {data.power}
                </small>
              )}
              {data.accuracy && (
                <small>
                  <b>{translate(UIKeys.accuracy)}: </b>
                  {data.unavoidable ? translate('unavoidable') : `${data.accuracy}%`}
                </small>
              )}
            </div>
          </section>

          {data.status_effects_elements_max_3?.length > 0 && (
            <section class="status-card-container">
              {(data.status_effects_elements_max_3 ?? []).map((elem) => (
                <div class="status-group">
                  <LazyImage
                    src={elem.icon?.path}
                    classes="status"
                    alt={`status of ${elem.name_localised}`}
                  />
                  <small>{elem.name_localised}</small>
                </div>
              ))}
            </section>
          )}

          <div class="ap-block">
            {Array.from(Array(data.cost)).map(() => (
              <LazyImage src="/assets/img/meta/ap.png" classes="ap" alt="Action Point" />
            ))}
          </div>
        </a>
      ))
    }
  </section>
</Layout>

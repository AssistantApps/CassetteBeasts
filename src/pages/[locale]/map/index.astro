---
import Breadcrumb from 'components/Breadcrumb.astro';
import Layout from 'components/layouts/Layout.astro';
import LazyImage from 'components/common/LazyImage.astro';

import languageJson from '../../../assets/json/language.json';
import './_list.scss';
import './_shared.scss';

import { astroPaths } from 'constants/astro';
import { breadcrumb } from 'constants/breadcrumb';
import { AppImage } from 'constants/image';
import { IntermediateFile } from 'constants/intermediateFile';
import { availableLanguages, UIKeys } from 'constants/localisation';
import { routes } from 'constants/route';
import { site } from 'constants/site';
import type { ILocalisation } from 'contracts/localisation';
import { AccessMode, type IGuideSchema } from 'contracts/schema/guideScheme';
import type { IWorldEnhanced } from 'contracts/world';
import { isoDate } from 'helpers/dateHelper';
import { readDataFromAssets } from 'helpers/fileHelper';
import { toSchemaOrgProperty } from 'helpers/schemaHelper';
import { limitLengthWithEllipse } from 'helpers/stringHelper';
import { translator } from 'helpers/translateHelper';

export async function getStaticPaths() {
  const paths: any = [];
  for (const locale of availableLanguages) {
    const itemMap = await readDataFromAssets<Record<string, IWorldEnhanced>>({
      pathFolders: [...astroPaths.intermediatePath, locale],
      destFileName: IntermediateFile.world,
    });
    const path = {
      params: { locale: locale },
      props: { list: Object.values(itemMap) },
    };
    paths.push(path as never);
  }
  return paths;
}

const { locale } = Astro.params;
const list = (Astro.props as any).list as Array<IWorldEnhanced>;
const translationLookup = (languageJson as Record<string, ILocalisation>)[locale].messages;
const { translate } = translator(translationLookup);

const metaImage = `assets/img/meta/${locale}${routes.map}-meta.png`;
const descriptionMessages = list
  .slice(0, 5)
  .map((g) => g.title_localised)
  .filter((m) => m != null)
  .join('. ');
const description = limitLengthWithEllipse(descriptionMessages, 120);
const schemaOverride: IGuideSchema = {
  name: translate(UIKeys.map),
  headline: translate(UIKeys.map),
  about: description,
  abstract: description,
  description: description,
  accessMode: AccessMode.textual,
  dateModified: isoDate(),
  thumbnailUrl: site.rootUrl + metaImage,
};
---

<Layout
  locale={locale}
  metaImageUrl={'/' + metaImage}
  documentTitle={translate(UIKeys.map)}
  additionalKeywords={[translate(UIKeys.map)]}
  schemaOverride={toSchemaOrgProperty('Guide', schemaOverride)}
  translationLookup={translationLookup}
>
  <Breadcrumb
    locale={locale}
    translationLookup={translationLookup}
    breadcrumbs={[breadcrumb.world(locale)]}
  />

  <section id="world-display" class="item-detail-card mb-3">
    <div class="meta">
      <h1>{translate(UIKeys.map)}</h1>
      <h2>Assistant for {translate(UIKeys.cassetteBeasts)}</h2>
    </div>

    <div id="world-tab-container" class="tab0">
      <div class="item-detail-card-heading primary noselect animate__animated animate__fadeIn">
        {
          list.map((data, index) => (
            <div
              class={`button-slanted cursor-pointer tab-button-${index}`}
              onclick={`applyClassToId('world-tab-container', 'tab', 'tab${index}')`}
            >
              <span class="button-slanted-content">{data.title_localised}</span>
            </div>
          ))
        }
      </div>

      <div class="item-detail-card-body">
        <div class="map-body">
          {
            list.map((map, index) => (
              <div class={`tab-content-${index} ta-center`}>
                <div class="map-grid-container">
                  <LazyImage
                    src={map.map_texture?.path}
                    classes="map"
                    alt={`${map.title_localised}`}
                    loadingImage={AppImage.cardLoader}
                  />
                  <div
                    class="map-grid"
                    style={`--num-col:${map.numOfColumns}; --num-row:${map.numOfRows};`}
                  >
                    {map.chunk_meta_data_localised.map((chunkMeta, rowIdx) => (
                      <Fragment>
                        {chunkMeta.map((cell, colIdx) =>
                          cell != null ? (
                            <a
                              href={`/${locale}${routes.map}/${map.id}/${cell.id}.html`}
                              class={`cell x-${colIdx} y-${rowIdx}`}
                            >
                              <div class="popup">
                                <h5>
                                  {cell.title_localised} <small>({cell.id})</small>
                                </h5>
                                {cell.features_localised.map((feat) => (
                                  <div class="details">
                                    {feat.icon_url && (
                                      <LazyImage
                                        src={feat.icon_url}
                                        classes="status"
                                        alt={`${feat.title_localised}`}
                                      />
                                    )}
                                    <div class="text">
                                      <p class="name">{feat.title_localised}</p>
                                    </div>
                                  </div>
                                ))}
                                {cell.monster_in_habitat.length > 0 && (
                                  <div class="monster-spawns">
                                    {cell.monster_in_habitat.map((monster) => (
                                      <LazyImage
                                        src={monster.icon_url}
                                        alt={monster.name_localised}
                                      />
                                    ))}
                                  </div>
                                )}
                              </div>
                            </a>
                          ) : (
                            <div class={`cell x-${colIdx} y-${rowIdx}`} />
                          ),
                        )}
                      </Fragment>
                    ))}
                  </div>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </section>
</Layout>

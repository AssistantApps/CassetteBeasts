---
import path from 'path';
import imageSize from 'image-size';

import { imgUrl } from 'helpers/urlHelper';
import { AppImage } from 'constants/image';

interface Props {
  src?: string;
  classes?: string;
  alt: string;
  style?: string;
  width?: string;
  height?: string;
  loadingImage?: string;
  loadingStrat?: 'lazy' | 'viewport' | 'defer' | 'eager';
  draggable?: boolean;
}

const { src, classes, style, alt, width, height } = Astro.props;
const loadingStrat = Astro.props.loadingStrat ?? 'viewport';
const loadingImage = Astro.props.loadingImage ?? AppImage.cardLoader;
const draggable = Astro.props.draggable ?? false;
let imgSource = imgUrl(src);
let imgDataSource: string | undefined;

if (loadingStrat == 'viewport') {
  imgDataSource = imgUrl(src);
  imgSource = loadingImage;
}

if (loadingStrat == 'defer') {
  imgDataSource = undefined;
  imgSource = loadingImage;
}

let imgWidth;
let imgHeight;

try {
  if (src != null) {
    const imgFullPath = path.join('public', imgUrl(src));
    const dimensions = imageSize(imgFullPath);
    imgWidth = dimensions.width;
    imgHeight = dimensions.height;
  }
} catch (ex) {
  console.error(ex);
  // unused
}

if (width != null) imgWidth = width;
if (height != null) imgHeight = height;
---

<img
  src={imgSource}
  data-src={imgDataSource}
  data-lazy={loadingStrat}
  class={classes}
  style={style}
  alt={alt}
  width={imgWidth}
  height={imgHeight}
  loading={loadingStrat == 'eager' ? 'eager' : 'lazy'}
  draggable={draggable}
/>

<script>
  function setImgSrcFromDataSrc(img: any) {
    img.src = img.dataset.src;
    img.dataset.lazy = 'done';
  }

  function loadImages(newDocument: Document) {
    const images = newDocument.querySelectorAll('img[loading="lazy"][data-lazy="defer"]');
    images.forEach(setImgSrcFromDataSrc);
  }

  function loadImagesWithIntersectionObserver(newDocument: Document) {
    const images = newDocument.querySelectorAll('img[loading="lazy"][data-lazy="viewport"]');
    if (images == null || images.length < 1) return;

    const intersectionExists = 'IntersectionObserver' in window;
    if (!intersectionExists) {
      images.forEach(setImgSrcFromDataSrc);
      return;
    }
    const intersectionObserver = new IntersectionObserver(
      (entries: Array<IntersectionObserverEntry>, observer: IntersectionObserver) => {
        entries.map((entry) => {
          if (entry.isIntersecting) {
            const img: any = entry.target;
            img.src = img.dataset.src;
            img.dataset.lazy = 'observed';
            observer.unobserve(img);
          }
        });
      },
    );
    images.forEach((image) => intersectionObserver.observe(image));
    setTimeout(() => {
      images.forEach((img: any) => {
        intersectionObserver.unobserve(img);
        img.src = img.dataset.src;
        img.dataset.lazy = 'timeout-over';
      });
    }, 5_000);
  }

  document.addEventListener('astro:page-load', () => {
    loadImagesWithIntersectionObserver(document);
    loadImages(document);
  });
</script>

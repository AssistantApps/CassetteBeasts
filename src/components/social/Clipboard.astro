---
import { type ISocialShare } from 'contracts/socialShare';

interface Props extends ISocialShare {}

const { title } = Astro.props;
const url = Astro.props.url ?? Astro.request.url;

const copyToClipSvg = `
<svg role="img" viewBox="0 0 28 28" fill="none" stroke="currentcolor" stroke-width="2" xmlns="http://www.w3.org/2000/svg">
  <title>Copy to clipboard</title>
  <g transform="translate(3, 3)">
    <path d="M6 11C6 8.17157 6 6.75736 6.87868 5.87868C7.75736 5 9.17157 5 12 5H15C17.8284 5 19.2426 5 20.1213 5.87868C21 6.75736 21 8.17157 21 11V16C21 18.8284 21 20.2426 20.1213 21.1213C19.2426 22 17.8284 22 15 22H12C9.17157 22 7.75736 22 6.87868 21.1213C6 20.2426 6 18.8284 6 16V11Z" ></path>
  </g>
  <path d="M6 19C4.34315 19 3 17.6569 3 16V10C3 6.22876 3 4.34315 4.17157 3.17157C5.34315 2 7.22876 2 11 2H15C16.6569 2 18 3.34315 18 5"></path>
</svg>
`;

const copyToClipSuccessSvg = `
<svg role="img" viewBox="0 0 24 24" fill="none" stroke="currentcolor" stroke-width="2" xmlns="http://www.w3.org/2000/svg">
  <title>Copy to clipboard</title>
  <path d="M12 22C17.5 22 22 17.5 22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22Z" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M7.75 12L10.58 14.83L16.25 9.17004" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
</svg>
`;
---

<a id="copyToClipboard" href="#" class="social-share-btn" title={title}>
  <slot>
    <style lang="scss">
      svg {
        &:hover {
          stroke: #3fbb9f;
        }
        path {
          transition: 250ms stroke ease-in-out;
        }
      }
    </style>
    <Fragment set:html={copyToClipSvg} />
  </slot>
</a>
<script is:inline define:vars={{ url, copyToClipSvg, copyToClipSuccessSvg }}>
  const copyToClipboardElem = document.getElementById('copyToClipboard');
  if (copyToClipboardElem == null) return;
  copyToClipboardElem.addEventListener('click', (event) => {
    event.preventDefault();
    if (!navigator.clipboard) return;
    navigator.clipboard.writeText(url).then(
      () => {
        const svgElem = document.querySelector('#copyToClipboard svg');
        svgElem.innerHTML = copyToClipSuccessSvg;

        setTimeout(() => {
          svgElem.innerHTML = copyToClipSvg;
        }, 1000);
      },
      (err) => {
        console.error('Async: Could not copy text: ', err);
      },
    );
  });
</script>
